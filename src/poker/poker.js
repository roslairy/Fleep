// Generated by CoffeeScript 1.9.1
Poker = {};
var pokerTouch;

pokerTouch = cc.EventListener.create({
  event: cc.EventListener.TOUCH_ONE_BY_ONE,
  swallowTouches: true,
  onTouchBegan: function(touch, event) {
    var locationInNode, rect, size, target;
    target = event.getCurrentTarget();
    locationInNode = target.convertToNodeSpace(touch.getLocation());
    size = target.getContentSize();
    rect = cc.rect(0, 0, size.width, size.height);
    if (cc.rectContainsPoint(rect, locationInNode)) {
      return true;
    } else {
      return false;
    }
  },
  onTouchEnded: function(touch, event) {
    var target;
    target = event.getCurrentTarget();
    return target.eventTouch.invoke(target);
  }
});

Poker.pokerTouch = pokerTouch;

Poker.POKER_COLOR_BLUE = "blue.png";

Poker.POKER_COLOR_RED = "red.png";

Poker.POKER_COLOR_GREEN = "green.png";

Poker.POKER_COLOR_PURPLE = "purple.png";

Poker.createPoker = function(point, pointIndex, typeCount) {
  var disappear, flipIn, flipOut, poker;
  poker = new cc.Sprite();
  cc.eventManager.addListener(Poker.pokerTouch.clone(), poker);
  poker.pointIndex = pointIndex;
  poker.scaleY = 0;
  poker.typeCount = typeCount;
  poker.currentType = 0;
  poker.x = point.x;
  poker.y = point.y;
  poker.isAnim = false;
  poker.isShown = false;
  flipIn = cc.scaleTo(0.03, 1, 0);
  flipIn.easing(cc.easeCircleActionIn());
  flipOut = cc.scaleTo(0.16, 1, 1);
  flipOut.easing(cc.easeCircleActionOut());
  disappear = cc.scaleTo(0.16, 1, 0);
  disappear.easing(cc.easeQuarticActionOut());
  poker.flipIn = flipIn;
  poker.flipOut = flipOut;
  poker.disappearAnim = disappear;
  poker.POKER_COLOR_BLUE = "blue.png";
  poker.POKER_COLOR_RED = "red.png";
  poker.POKER_COLOR_GREEN = "green.png";
  poker.POKER_COLOR_PURPLE = "purple.png";
  poker.type = [poker.POKER_COLOR_BLUE, poker.POKER_COLOR_RED, poker.POKER_COLOR_PURPLE, poker.POKER_COLOR_GREEN];
  poker.showColor = null;
  poker.changeColor = function() {
    this.currentType++;
    this.currentType %= this.typeCount;
    this.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame(this.type[this.currentType]));
    return this.showColor = this.type[this.currentType];
  };
  poker.toColor = function(type) {
    this.currentType = type;
    this.setSpriteFrame(cc.spriteFrameCache.getSpriteFrame(this.type[this.currentType]));
    return this.showColor = this.type[this.currentType];
  };
  poker.onAnimBegin = function() {
    return this.isAnim = true;
  };
  poker.onAnimEnd = function() {
    this.isAnim = false;
    return this.eventAnimEnd.invoke(this);
  };
  poker.setSpriteFrame(poker.type[poker.currentType]);
  poker.eventTouch = Utils.event_1();
  poker.eventAnimEnd = Utils.event_1();
  poker.flip = function() {
    var sequence;
    if (!this.isAnim) {
      sequence = cc.sequence([cc.callFunc(this.onAnimBegin, this), this.flipIn, cc.callFunc(this.changeColor, this), this.flipOut, cc.callFunc(this.onAnimEnd, this)]);
      this.runAction(sequence);
    }
    return this;
  };
  poker.appear = function() {
    var sequence;
    if (!(this.isAnim || this.isShown)) {
      sequence = cc.sequence([cc.callFunc(this.onAnimBegin, this), this.flipOut, cc.callFunc(this.onAnimEnd, this)]);
      this.runAction(sequence);
    }
    return this;
  };
  poker.disappear = function() {
    var sequence;
    if (!(this.isAnim || this.isShown)) {
      sequence = cc.sequence([cc.callFunc(this.onAnimBegin, this), this.disappearAnim, cc.callFunc(this.onAnimEnd, this)]);
      this.runAction(sequence);
    }
    return this;
  };
  return poker;
};
