// Generated by CoffeeScript 1.9.1
Utils = {};
Utils.event_0 = function() {
  var event;
  event = {};
  event.listeners = [];
  event.add = function(selector) {
    return this.listeners.push(selector);
  };
  event.clear = function() {
    return this.listeners = [];
  };
  event.invoke = function() {
    var k, len, listener, ref, results;
    ref = this.listeners;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      listener = ref[k];
      results.push(listener());
    }
    return results;
  };
  return event;
};

Utils.event_1 = function() {
  var event;
  event = {};
  event.listeners = [];
  event.add = function(selector) {
    return this.listeners.push(selector);
  };
  event.clear = function() {
    return this.listeners = [];
  };
  event.invoke = function(arg1) {
    var k, len, listener, ref, results;
    ref = this.listeners;
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      listener = ref[k];
      results.push(listener(arg1));
    }
    return results;
  };
  return event;
};

Utils.matrixNode = function(matrix, x, y) {
  var matrixNode;
  matrixNode = {};
  matrixNode.matrix = matrix;
  matrixNode.x = x;
  matrixNode.y = y;
  matrixNode.content = null;
  matrixNode.left = function() {
    return this.matrix.getNode(x - 1, y);
  };
  matrixNode.right = function() {
    return this.matrix.getNode(x + 1, y);
  };
  matrixNode.above = function() {
    return this.matrix.getNode(x, y + 1);
  };
  matrixNode.bottom = function() {
    return this.matrix.getNode(x, y - 1);
  };
  matrixNode.getAllDirection = function() {
    var result, s, tmp;
    s = this;
    result = [this];
    tmp = [];
    tmp.push(this.left());
    tmp.push(this.right());
    tmp.push(this.above());
    tmp.push(this.bottom());
    tmp.sort(function(a, b) {
      var aWeight, bWeidht;
      aWeight = Math.abs(a.x - s.x) + Math.abs(a.y - s.y);
      bWeidht = Math.abs(b.x - s.x) + Math.abs(b.y - s.y);
      if (aWeight > bWeidht) {
        return 1;
      } else {
        return -1;
      }
    });
    return result.concat(tmp);
  };
  return matrixNode;
};

Utils.matrix = function(x, y, fillSelector) {
  var i, j, k, l, matrix, ref, ref1;
  matrix = {};
  matrix.x = x;
  matrix.y = y;
  matrix.nodes = [];
  for (i = k = 1, ref = x; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
    matrix.nodes[i] = [];
    for (j = l = 1, ref1 = y; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {
      matrix.nodes[i][j] = Utils.matrixNode(matrix, i, j);
      fillSelector(matrix.nodes[i][j]);
    }
  }
  matrix.getNode = function(x, y) {
    while (x > this.x) {
      x -= this.x;
    }
    while (x < 1) {
      x += this.x;
    }
    while (y > this.y) {
      y -= this.y;
    }
    while (y < 1) {
      y += this.y;
    }
    return this.nodes[x][y];
  };
  matrix.all = function() {
    var m, n, ref2, ref3, result;
    result = [];
    for (i = m = 1, ref2 = this.x; 1 <= ref2 ? m <= ref2 : m >= ref2; i = 1 <= ref2 ? ++m : --m) {
      for (j = n = 1, ref3 = this.y; 1 <= ref3 ? n <= ref3 : n >= ref3; j = 1 <= ref3 ? ++n : --n) {
        result.push(this.nodes[i][j]);
      }
    }
    return result;
  };
  matrix.step = function() {
    var _x, _y, result;
    result = [];
    x = 0;
    while (x < this.x) {
      x++;
      _y = 1;
      _x = x;
      while (_x >= 1 && _y <= this.y) {
        result.push(this.getNode(_x, _y));
        _x--;
        _y++;
      }
    }
    y = 1;
    while (y < this.y) {
      y++;
      _y = y;
      _x = x;
      while (_x >= 1 && _y <= this.y) {
        result.push(this.getNode(_x, _y));
        _x--;
        _y++;
      }
    }
    return result;
  };
  matrix.findNode = function(content) {
    var result;
    result = null;
    this.nodes.forEach(function(arrays) {
      return arrays.forEach(function(elem) {
        if (elem.content === content) {
          return result = elem;
        }
      });
    });
    return result;
  };
  return matrix;
};
